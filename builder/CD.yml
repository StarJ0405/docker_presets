#.github/workflows
name: CD with Docker Hub
on:
  # main으로 push 시
  #  push:
  #    branches:
  #      - main
  # 풀 리퀘스트시
  #  pull_request:
  #    branches:
  #      - main
  # 수동
  workflow_dispatch:
    inputs:
      logLevel:
        description: "Log level"
        required: true
        default: "warning"
      environment:
        description: "Environment to deploy to"
        required: true
        type: choice
        options:
          - staging
          - production
# 다른 워크플로우 완료시
#  workflow_run:
#    workflows: ["Build CI"] # "Build CI"라는 이름의 워크플로우가 실행된 후
#    types: [completed]      # 완료되었을 때만 실행
#    branches: [main]
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      # - name: application.yml 생성
      #   env:
      #     ACTIONS_STEP_DEBUG: true
      #     APPLICATION_SECRET: ${{secrets.APPLICATION_SECRET}}
      #   run: |
      #     mkdir -p Back/src/main/resources/
      #     echo "$APPLICATION_SECRET" > Back/src/main/resources/application.yml
      - name: env.production 생성
        env:
          ACTIONS_STEP_DEBUG: true
          FRONT_ENV: ${{secrets.FRONT_ENV}}
          BACK_ENV: ${{secrets.BACK_ENV}}
        run: |
          mkdir -p Back
          mkdir -p Front
          echo "$FRONT_ENV" > Front/env.production
          echo "$BACK_ENV" > Back/env.production
      - name: Build and Save Docker Image
        run: |
          # 1. 이미지 빌드 (로컬 태그 사용)
          docker build -t local-app:latest .
          # 2. 이미지를 tar 파일로 저장
          docker save local-app:latest -o app_image.tar
      - name: Deploy to server
        uses: appleboy/scp-action@master
        id: move_file
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          password: ${{ secrets.KEY }}
          source: "app_image.tar"
          target: ${{ secrets.HOME }}
      - name: Deploy and Load on Server
        uses: appleboy/ssh-action@master
        id: deploy
        env:
          HOME: ${{ secrets.HOME }}
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          password: ${{ secrets.KEY }}
          script: |
            whoami
            mkdir -p ${HOME}/builder
            sudo docker load -i ${HOME}/app_image.tar
            rm ${HOME}/app_image.tar
            sudo docker rm -f $(sudo docker ps -aqf "name=builder") # 컨테이너 찾아서 종료            
            sudo docker run -d -v ${HOME}/builder:/share --name "builder" local-app:latest
